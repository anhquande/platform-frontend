version: 2.1
jobs:
  install-lint:
    # install and lint is taken as one job to remove required time for downloading cache
    docker:
      - image: krzkaczor/neufund-platform-base
    working_directory: /home/circleci/app

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run:
          mkdir -p /home/circleci/.cache/Cypress && cp -R /home/circleci/.cache/Cypress
          ~/.cache/Cypress

      # Installation
      - run: yarn --frozen-lockfile
      # Linting
      - run: yarn lint

      - run: cp -R ~/.cache/Cypress/ /home/circleci/.cache/

      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
          key: v14-deps-{{ checksum "package.json" }}

  build-frontend:
    docker:
      - image: krzkaczor/neufund-platform-base
    working_directory: /home/circleci/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-

      - run: yarn prepare
      - run:
          command: yarn build:prod:e2e
          no_output_timeout: 10m
      # If build takes more than 10mins then fail
      - persist_to_workspace:
          root: /home/circleci/app
          paths:
            - ./
  test:
    docker:
      - image: krzkaczor/neufund-platform-base
    working_directory: /home/circleci/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run: yarn

      - run: yarn test:browser && yarn test:node

  test-e2e:
    machine:
      enabled: true
      image: circleci/classic:edge
      docker_layer_caching: true

    parallelism: 4

    working_directory: /home/circleci/app

    steps:
      - attach_workspace:
          at: /home/circleci/app
      - checkout
      - run: ./.circleci/install-yarn.sh
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run: source /opt/circleci/.nvm/nvm.sh && yarn prepare

      - run:
          command: source /opt/circleci/.nvm/nvm.sh && yarn test:e2e
          no_output_timeout: 30m
      
      - persist_to_workspace:
          root: /home/circleci/app
          paths:
            - ./cypress/screenshots

  codechecks-e2e:
    docker:
      - image: circleci/node:8.11.2-stretch
    steps:
      - run:
          name: Update
          working_directory: /
          command: |
            sudo apt-get update -y
      - run:
          name: Update
          working_directory: /
          command: |
            sudo apt-get upgrade -y
      - run:
          name: Install Chrome headless dependencies
          working_directory: /
          command: |
            sudo apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \
            libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
            ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget --fix-missing
      - checkout
      - restore_cache:
            keys:
            - v3-dependencies-{{ checksum "package.json" }}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy all screenshots in one place
          working_directory: /tmp/workspace
          command: |
            mkdir -p /home/circleci/project/__screenshots__
            cp `find  | grep png` /home/circleci/project/__screenshots__
      - run:
          command: yarn codechecks codechecks-e2e-vis-reg.ts

  test-e2e-chrome:
    machine:
      enabled: true
      image: circleci/classic:edge
      docker_layer_caching: true

    parallelism: 1

    working_directory: /home/circleci/app

    steps:
      - attach_workspace:
          at: /home/circleci/app
      - run: ./.circleci/install-yarn.sh
      - run: ./.circleci/install-chrome.sh
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run: source /opt/circleci/.nvm/nvm.sh && yarn prepare

      - run:
          command: source /opt/circleci/.nvm/nvm.sh && yarn test:e2e:chrome
          no_output_timeout: 30m

  codechecks:
    docker:
      - image: krzkaczor/neufund-platform-base
    working_directory: /home/circleci/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run: yarn
      - run: yarn build:commit-deployment
      - run: yarn codechecks

  codechecks-vis-reg:
    docker:
      - image: krzkaczor/neufund-platform-base
    working_directory: /home/circleci/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run: yarn
      - run: yarn storybook:screenshots
      - run: yarn codechecks ./codechecks-vis-reg.ts

  deploy-storybook:
    docker:
      - image: krzkaczor/neufund-platform-base
    working_directory: /home/circleci/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-deps-{{ checksum "package.json" }}
            - v14-deps-
      - run: yarn prepare

      - run: yarn deploy-storybook --ci --host-token-env-variable=DANGER_GITHUB_API_TOKEN

workflows:
  version: 2

  mainflow:
    jobs:
      - install-lint
      - build-frontend:
          requires:
            - install-lint
      - test:
          requires:
            - install-lint
      - codechecks:
          requires:
            - install-lint
      - test-e2e:
          requires:
            - build-frontend
      - codechecks-e2e:
          requires:
            - test-e2e
      - codechecks-vis-reg:
          requires:
            - build-frontend

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - production
    jobs:
      - install-lint
      - test:
          requires:
            - install-lint
      - test-e2e:
          requires:
            - install-lint
      - codechecks:
          requires:
            - install-lint

  deploy-storybook:
    jobs:
      - deploy-storybook:
          filters:
            branches:
              only: master
